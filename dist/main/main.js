"use strict";const{app:m,BrowserWindow:y,ipcMain:l}=require("electron"),w=require("path"),q=!m.isPackaged,{exec:d,spawn:g}=require("child_process"),x=require("https"),p=require("fs"),h=require("os");let i,n;const k=()=>new Promise((t,o)=>{x.get("https://ollama.ai/install.sh",a=>{let e="";a.on("data",r=>{e+=r}),a.on("end",()=>{t(e)})}).on("error",a=>{o(a)})}),O=async()=>{const t=h.platform();if(t==="darwin"){const o=await k(),a=w.join(h.tmpdir(),"ollama-install.sh");p.writeFileSync(a,o),p.chmodSync(a,"755");try{return await new Promise((e,r)=>{d(`sh ${a}`,(s,c,u)=>{if(s){r(s);return}e(c)})}),await P(),await new Promise(e=>setTimeout(e,2e3)),await v("llava-phi3"),!0}catch(e){throw e}}else throw t==="win32"?new Error("Windows installation not yet implemented"):new Error("Unsupported platform")},P=()=>new Promise((t,o)=>{const e=h.platform()==="win32"?"ollama.exe":"ollama";n=g(e,["serve"]),n.stdout.on("data",r=>{console.log(`Ollama: ${r}`),r.toString().includes("Listening")&&t()}),n.stderr.on("data",r=>{console.error(`Ollama Error: ${r}`)}),n.on("error",r=>{o(r)})}),v=t=>new Promise((o,a)=>{const e=g("ollama",["pull",t]);e.stdout.on("data",r=>{const c=r.toString().match(/([0-9.]+)%/);if(c){const u=parseFloat(c[1]);i.webContents.send("model-pull-progress",u)}}),e.stderr.on("data",r=>{console.error(`Model Pull Error: ${r}`)}),e.on("close",r=>{r===0?o():a(new Error(`Model pull failed with code ${r}`))})});function f(){if(i=new y({width:1200,height:800,title:"Alt Text AI",icon:w.join(__dirname,"../../assets/icons/triangle_construct_light.gif"),webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:w.join(__dirname,"../preload/preload.js")}}),q)i.loadURL("http://localhost:5173"),i.webContents.openDevTools();else{const t=w.join(__dirname,"../../dist/index.html");i.loadFile(t).catch(o=>{console.error("Failed to load index.html:",o),i.loadURL(`file://${t}`).catch(a=>{console.error("Failed to load using file URL:",a)})})}i.once("ready-to-show",()=>{i.show()})}l.handle("install-ollama",async()=>{try{return await O(),!0}catch(t){throw t}});l.handle("pull-model",async(t,o)=>{try{return await v(o),!0}catch(a){throw a}});l.handle("start-ollama-server",async()=>{try{return await P(),!0}catch(t){throw t}});l.handle("check-ollama-status",async()=>new Promise(t=>{d("ollama --version",o=>{t(!o)})}));l.handle("quit-app",()=>{m.quit()});m.whenReady().then(()=>{f(),m.on("activate",()=>{y.getAllWindows().length===0&&f()})});m.on("window-all-closed",()=>{process.platform!=="darwin"&&m.quit()});m.on("before-quit",()=>{n&&n.kill()});const _=()=>new Promise((t,o)=>{d("ollama --version",(a,e)=>{if(a){o(a);return}t(e.trim())})}),b=()=>new Promise((t,o)=>{const e=h.platform()==="win32"?"where ollama":"which ollama";d(e,(r,s)=>{if(r){o(r);return}t(s.trim())})}),S=()=>new Promise((t,o)=>{if(!n){t();return}n.on("close",()=>{n=null,t()}),n.kill()});l.handle("get-ollama-version",async()=>{try{return await _()}catch(t){throw t}});l.handle("get-ollama-path",async()=>{try{return await b()}catch(t){throw t}});l.handle("stop-ollama-server",async()=>{try{return await S(),!0}catch(t){throw t}});const $=async()=>new Promise((t,o)=>{const a=h.platform();let e;switch(a){case"darwin":e="open -a Terminal";break;case"win32":e="start cmd";break;case"linux":const r=["gnome-terminal","konsole","xterm"];for(const s of r)try{d(`which ${s}`,c=>{if(!c){e=s;return}})}catch{}e||(e="xterm");break;default:o(new Error("Unsupported platform"));return}d(e,r=>{if(r){o(r);return}t()})});l.handle("open-terminal",async()=>{try{return await $(),!0}catch(t){throw console.error("Failed to open terminal:",t),t}});
